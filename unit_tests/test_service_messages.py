import json
from datetime import date
from unittest.mock import MagicMock

from flask import url_for
from flask_testing import TestCase
from mock import patch
from search_local_land_charge_api import main
from search_local_land_charge_api.models import ServiceMessage


class TestServiceMessages(TestCase):

    def create_app(self):
        main.app.testing = True
        return main.app

    @patch('search_local_land_charge_api.resources.service_messages.db')
    @patch('search_local_land_charge_api.app.validate')
    def test_post_service_message_ok(self, mock_validate, mock_db):

        mock_payload = {"message-name": "Test message",
                        "message-en": "This is a test message generated by the unit test suite",
                        "message-cy": "This is a test message generated by the unit test suite in welsh",
                        "hyperlink-message-en": "This is a test link generated by the unit test suite",
                        "hyperlink-message-cy": "This is a test link generated by the unit test suite in welsh",
                        "hyperlink-link-en": "http://anenglishurl.com",
                        "hyperlink-link-cy": "http://anwelshurl.com",
                        "message-expiry-date": date.today().strftime("%Y-%m-%d")}

        response = self.client.post(url_for("service_messages.post_service_message"),
                                    headers={'Authorization': 'Fake JWT',
                                             'Content-type': 'application/json'},
                                    data=json.dumps(mock_payload))
        response_data = json.loads(response.data.decode())
        self.assertEqual(response_data, mock_payload)
        self.assertStatus(response, 201)

    @patch('search_local_land_charge_api.resources.service_messages.db')
    @patch('search_local_land_charge_api.app.validate')
    def test_post_service_message_errors(self, mock_validate, mock_db):

        mock_payload = {"message-name": "Test message",
                        "message-cy": "Test welsh"}

        response = self.client.post(url_for("service_messages.post_service_message"),
                                    headers={'Authorization': 'Fake JWT',
                                             'Content-type': 'application/json'},
                                    data=json.dumps(mock_payload))
        response_data = json.loads(response.data.decode())
        self.assertEqual(response_data, {'error_code': 'SM002', 'error_message': {
                         'message_en': ['Missing data for required field.']}})
        self.assertStatus(response, 400)

    @patch('search_local_land_charge_api.resources.service_messages.db')
    @patch('search_local_land_charge_api.app.validate')
    def test_post_service_message_no_json(self, mock_validate, mock_db):

        mock_payload = {"message-name": "Test message",
                        "message": "This is a test message generated by the unit test suite"}

        response = self.client.post(url_for("service_messages.post_service_message"),
                                    headers={'Authorization': 'Fake JWT',
                                             'Content-type': 'application/rhubarb'},
                                    data=json.dumps(mock_payload))
        self.assertStatus(response, 415)

    @patch('search_local_land_charge_api.resources.service_messages.ServiceMessage')
    @patch('search_local_land_charge_api.app.validate')
    def test_get_service_message_active_messages(self, mock_validate, mock_service_message):

        # Set the responses of is_(None) and >= comparisons for the expiry_date filters
        mock_expiry_date = MagicMock()
        mock_expiry_date.is_.return_value = True
        mock_expiry_date.__ge__.return_value = False
        mock_expiry_date.__lt__.return_value = False
        mock_service_message.message_expiry_date = mock_expiry_date

        service_message = ServiceMessage("Test message", "English message",
                                         "Welsh message",
                                         "hyperlink msg en",
                                         "hyperlink msg cy",
                                         "hyperlink link en",
                                         "hyperlink link cy",
                                         date.today())

        mock_service_message.query.filter.return_value.order_by.return_value.all.return_value = [service_message]

        response = self.client.get(url_for("service_messages.get_service_messages"),
                                   headers={'Authorization': 'Fake JWT'})
        self.assertStatus(response, 200)

        response_data = response.data.decode()
        response_json = json.loads(response_data)

        expected_message = {"message-name": "Test message",
                            "message-en": "English message",
                            "message-cy": "Welsh message",
                            "hyperlink-message-en": "hyperlink msg en",
                            "hyperlink-message-cy": "hyperlink msg cy",
                            "hyperlink-link-en": "hyperlink link en",
                            "hyperlink-link-cy": "hyperlink link cy",
                            "message-expiry-date": date.today().strftime("%Y-%m-%d")
                            }

        # Check expected message in active messages
        self.assertEqual(response_json["messages"][0], expected_message)
        self.assertEqual(response_json["expired-messages"][0], expected_message)

    @patch('search_local_land_charge_api.resources.service_messages.ServiceMessage')
    @patch('search_local_land_charge_api.app.validate')
    def test_get_service_message_all_messages(self, mock_validate, mock_service_message):

        # Set the responses of is_(None) and >= comparisons for the expiry_date filters
        mock_expiry_date = MagicMock()
        mock_expiry_date.is_.return_value = True
        mock_expiry_date.__ge__.return_value = False
        mock_expiry_date.__lt__.return_value = False
        mock_service_message.message_expiry_date = mock_expiry_date

        service_message = ServiceMessage("Test message", "English message",
                                         "Welsh message",
                                         "hyperlink msg en",
                                         "hyperlink msg cy",
                                         "hyperlink link en",
                                         "hyperlink link cy")

        mock_service_message.query.filter.return_value.order_by.return_value.all.return_value = [service_message]

        response = self.client.get(url_for("service_messages.get_service_messages"),
                                   headers={'Authorization': 'Fake JWT'})
        self.assertStatus(response, 200)
        response_data = response.data.decode()
        response_json = json.loads(response_data)
        expected_message = {"message-name": "Test message",
                            "message-en": "English message",
                            "message-cy": "Welsh message",
                            "hyperlink-message-en": "hyperlink msg en",
                            "hyperlink-message-cy": "hyperlink msg cy",
                            "hyperlink-link-en": "hyperlink link en",
                            "hyperlink-link-cy": "hyperlink link cy"
                            }

        # Check expected message in active messages
        self.assertEqual(response_json["messages"][0], expected_message)
        # Check expected message in expired messages
        self.assertEqual(response_json["expired-messages"][0], expected_message)
        # Check expired message not set in either payload
        self.assertNotIn(response_data, "message-expiry-date")

    @patch('search_local_land_charge_api.resources.service_messages.ServiceMessage')
    @patch('search_local_land_charge_api.app.validate')
    def test_get_service_message_no_messages(self, mock_validate, mock_service_message):

        # Set the responses of is_(None) and >= comparisons for the expiry_date filters
        mock_expiry_date = MagicMock()
        mock_expiry_date.is_.return_value = True
        mock_expiry_date.__ge__.return_value = False
        mock_expiry_date.__lt__.return_value = False
        mock_service_message.message_expiry_date = mock_expiry_date
        mock_service_message.query.filter.return_value.order_by.return_value.all.return_value = []

        response = self.client.get(url_for("service_messages.get_service_messages"),
                                   headers={'Authorization': 'Fake JWT'})
        response_data = response.data.decode()
        self.assertStatus(response, 404)
        self.assertIn("No service messages found", response_data)

    @patch('search_local_land_charge_api.resources.service_messages.db')
    @patch('search_local_land_charge_api.app.validate')
    def test_delete_service_message_ok(self, mock_validate, mock_db):

        mock_db.session.query.return_value.get.return_value = True

        response = self.client.delete(url_for("service_messages.delete_service_message",
                                              service_message_id=12345),
                                      headers={'Authorization': 'Fake JWT'})
        self.assertStatus(response, 204)

    @patch('search_local_land_charge_api.resources.service_messages.db')
    @patch('search_local_land_charge_api.app.validate')
    def test_delete_service_message_bogus(self, mock_validate, mock_db):

        mock_db.session.query.return_value.get.return_value = False

        response = self.client.delete(url_for("service_messages.delete_service_message",
                                              service_message_id=12345),
                                      headers={'Authorization': 'Fake JWT'})
        self.assertStatus(response, 404)
